#!/usr/bin/env sh
# This file is part of linux-patches. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/linux-patches/master/COPYRIGHT. No part of linux-patches, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of linux-patches. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/linux-patches/master/COPYRIGHT.


set -e
set -u
set -f


_program_path_find()
{
    if [ "${_program_fattening_program_path+set}" = 'set' ]; then
        printf '%s\n' "$_program_fattening_program_path"

    elif [ "${0%/*}" = "$0" ]; then

        # We've been invoked by the interpreter as, say, bash program
        if [ -r "$0" ]; then
            pwd -P
        # Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
        else
            printf '\n'
        fi

    else

        # We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

        _program_path_find_parentPath()
        {
            parentPath="${scriptPath%/*}"
            if [ -z "$parentPath" ]; then
                parentPath='/'
            fi
            cd "$parentPath" 1>/dev/null
        }

        # pdksh / mksh have problems with unsetting a variable that was never set...
        if [ "${CDPATH+set}" = 'set' ]; then
            unset CDPATH
        fi

        if command -v realpath 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$(realpath "$0")"

                _program_path_find_parentPath
                pwd -P
            )
        elif command -v readlink 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$0"

                while [ -L "$scriptPath" ]
                do
                    _program_path_find_parentPath
                    scriptPath="$(readlink "$scriptPath")"
                done

                _program_path_find_parentPath
                pwd -P
            )
        else
            # This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
            (
                scriptPath="$0"

                _program_path_find_parentPath
                pwd -P
            )
        fi

    fi
}

apply_patches()
{
	cd "$(_program_path_find)" 1>/dev/null 2>/dev/null
		local ourFolderPath="$(pwd)"
	cd - 1>/dev/null 2>/dev/null
	
	if [ $# -ne 1 ]; then
		printf '%s\n' "ERROR: Please specify path to source folder to patch, eg $ourFolderPath /path/to/linux-stable"
		exit 1
	fi
	
	case "$1" in
		
		-h|--help)
			printf 'HELP: Call as `apply_linux_patches /path/to/linux-stable`'
			exit 0
		;;
		
		*)
			local linuxStableFolderPath="$1"
			if [ ! -e "$linuxStableFolderPath" ]; then
				printf '%s\n' "ERROR: /path/to/linux-stable '$linuxStableFolderPath' does not exist" 1>&2
				exit 1
			fi
			if [ ! -d "$linuxStableFolderPath" ]; then
				printf '%s\n' "ERROR: /path/to/linux-stable '$linuxStableFolderPath' is not a directory" 1>&2
				exit 1
			fi
			if [ ! -r "$linuxStableFolderPath" ]; then
				printf '%s\n' "ERROR: /path/to/linux-stable '$linuxStableFolderPath' is not readable" 1>&2
				exit 1
			fi
			if [ ! -w "$linuxStableFolderPath" ]; then
				printf '%s\n' "ERROR: /path/to/linux-stable '$linuxStableFolderPath' is not writable" 1>&2
				exit 1
			fi
			if [ ! -x "$linuxStableFolderPath" ]; then
				printf '%s\n' "ERROR: /path/to/linux-stable '$linuxStableFolderPath' is not searchable (executable)" 1>&2
				exit 1
			fi
		;;
		
	esac
	
	local patchSeriesFilePath="$ourFolderPath"/patches/series
	
	if [ ! -s "$patchSeriesFilePath" ]; then
		printf '%s\n' "ERROR: No patch series (or empty or not a file) found at '$patchSeriesFilePath'" 1>&2
		exit 1
	fi
	
	if ! command -v patch 1>/dev/null 2>/dev/null; then
		printf '%s\n' "ERROR: patch program not found" 1>&2
		exit 1
	fi
	
	cd "$linuxStableFolderPath" 1>/dev/null 2>/dev/null
		
		local lineNumber=0
		local patchRelativeFilePath
		while IFS='' read -r patchRelativeFilePath
		do
			lineNumber=$((lineNumber+1))
			case "$patchRelativeFilePath" in
		
				'')
					continue
				;;
			
				'#'*)
					continue
				;;
			
				*)
					local patchFileAbsolutePath="$ourFolderPath"/patches/"$patchRelativeFilePath"
					if [ ! -s "$patchFileAbsolutePath" ]; then
						printf '%s\n' "ERROR: patch file '$patchRelativeFilePath' on line (one-based) $lineNumber not found" 1>&2
						exit 1
					fi
					printf '%s\n' "INFO: Applying patch file '$patchRelativeFilePath' from line (one-based) $lineNumber" 1>&2
					patch -p1 -i "$ourFolderPath"/patches/"$patchRelativeFilePath" 1>&2
				;;
			
			esac
		
		
		done <"$patchSeriesFilePath"
		
	cd - 1>/dev/null 2>/dev/null
}

apply_patches "$@"
